[![Open in Visual Studio Code](https://classroom.github.com/assets/open-in-vscode-2e0aaae1b6195c2367325f4f02e2d04e9abb55f0b24a779b69b11b9e10269abc.svg)](https://classroom.github.com/online_ide?assignment_repo_id=18376630&assignment_repo_type=AssignmentRepo)
# SE_Day1
Software Engineering Day1 Assignment

#Part 1: Introduction to Software Engineering

Explain what software engineering is and discuss its importance in the technology industry.
software engineering is the apllication of engineering principles and methods in developing and maintaining high quality software and it involves designing, development, testing, deployment and maintenance of software products
It is important as it brings into existence modern world critical software like Apps, secure banking systems and online learning platforms etc. These apps and systems power aspects of modern life including communication, commerce, entertainment and healthcare

Identify and describe at least three key milestones in the evolution of software engineering.
Development of programming languages like Fortran, C
Establishment of software engineering as a discipline in the 1960s
The rise of agile methodologies in the 2000s

List and briefly explain the phases of the Software Development Life Cycle.
-Requirements - gathering and documenting the needs of users as well as the requirements of the system
-Design - the creation of software architecture designs that are detailed and of high quality
-Implementation - Writing of the code and building design specific software
-Testing - Varoius tests are conducted with the desire to nsure that the software meets quality standards and functional requirements
-Deployment- The software is released to users or customers
-Maintenance - providing ongoing support to the software after it has been deployed including regular updates and enhancements


Compare and contrast the Waterfall and Agile methodologies. Provide examples of scenarios where each would be appropriate.
-Waterfall methodology uses a linear and sequential approach whereas the Agile methodology uses an iterative and incremental approach to softwsre development
-For waterfall each phase should be completed before moving to the next whereas Agile is all about flexibility, collaboration and customer feedback
-Advantages of Waterfall include a clear stucture and documentation and it is rigid which makes it easy to manage, whereas the advatages of Agile are that you get a quick response, regular feedback from customers as well as improved team collaboratin
-Disadvantages of Waterfall the fact that it is difficult to accomodate any changes and the testing actually occurs late in the process. The disavantages of Agile include the fact that it is less predictable and that significant customer feedback is required


Describe the roles and responsibilities of a Software Developer, a Quality Assurance Engineer, and a Project Manager in a software engineering team.
Software Developer - responsible for writing code and implementing software solutions
 - maintaining and updating software to keep it functional. 
Quality Assurance Engineer - responsible for ensuring the quality of the software by designing and executing test plans
 - create development standards and procedures for the programmers to follow 
Project Manager - responsible for overseeing the planning, execution and delivery of the software project


Discuss the importance of Integrated Development Environments (IDEs) and Version Control Systems (VCS) in the software development process. Give examples of each.
An integrated development environment (IDE) is a software platform that facilitates the creation of other software applications by providing a space to write, compile, and debug code, sometimes with value-adding tools that reduce development efforts. eg Visual Studio Code (VSCode)
importance:
●	Programming languages have rules for how statements must be structured. Because an IDE knows these rules, it contains many intelligent features for automatically writing or editing the source code.
●	An IDE can format the written text by automatically making some words bold or italic, or by using different font colors. These visual cues make the source code more readable and give instant feedback about accidental syntax errors.
●	an IDE can make suggestions to complete a code statement when the developer begins typing.
●	IDEs increase programmer productivity by performing repeatable development tasks that are typically part of every code change. The following are some examples of regular coding tasks that an IDE carries out.
●	An IDE compiles or converts the code into a simplified language that the operating system can understand. - Some programming languages implement just-in-time compiling, in which the IDE converts human-readable code into machine code from within the application.
●	The IDE allows developers to automate unit tests locally before the software is integrated with other developers' code and more complex integration tests are run.
●	Debugging IDE enables a step through the code, line by line, as it runs and inspect code behavior. IDEs also integrate several debugging tools that highlight bugs caused by human error in real time, even as the developer is typing.

Version Control Systems (VCS) - are software tools that help software teams manage changes to source code over time. eg Git
importance:
Collaboration: Enables multiple developers to work on the same codebase without conflicts.
Change Tracking: Records detailed history of changes, allowing easy analysis of each modification. 
-Branching and Merging: Supports creating branches for new features and merging them back into the main code.
Error Recovery: Allows reverting to previous versions if new changes introduce errors



What are some common challenges faced by software engineers? Provide strategies to overcome these challenges.
-rapid technological advancement places considerable pressure on software engineers to stay current.
 Solution: adopting continuous learning practices and using agile methodologies to adapt to emerging trends, keeping their skills sharp in an ever-evolving industry. -
Time Constraints - Software engineering is a demanding and time-intensive field, often requiring engineers to work under high pressure to meet tight deadlines.
 Solution: adopt agile methodologies, such as Scrum, to streamline workflows by dividing large projects into manageable sprints 
-Limited Infrastructure - limited high-performance software engineering tools and computing platforms and inefficient data storage architectures. 
 Solution: Software engineers must rely heavily on a robust infrastructure to perform their jobs effectively.
Changing Software Requirements - Software requirements are often dynamic and subject to frequent changes, making it challenging for engineers to design and develop solutions that meet users' needs while accounting for future updates and bug fixes. 
Solution: engineers can adopt approaches like agile development, which emphasizes iterative progress and adaptability, and modular design, which enables flexibility by breaking systems into manageable, independent components.
Software Security - Programming secure software is a complex and challenging task. 
Solution: research ways to defend against hacking, malware, phishing, insider and third-party threats
Software Accessibility and Usability - Overly complex software can frustrate or confuse users. 
Solution: Use scalable architecture, Emphasize reliability.



Explain the different types of testing (unit, integration, system, and acceptance) and their importance in software quality assurance.
Unit tests - are close to the source of an application, They consist in testing individual methods and functions of the classes, components, or modules used by your software. - it ensures that each unit performs its intended function correctly, isolated from other components.
 Integration tests - verify that different modules or services used by your application work well together.
 - help to ensure data flows smoothly between modules and interfaces work as expected.
 System testing -Focus on the entire software system as a whole, including all functionalities and interactions.
 -It help to verify that the system meets all functional and non-functional requirements, including performance, usability, and security .
Acceptance tests - are formal tests that verify if a system satisfies business requirements. They require the entire application to be running while testing and focus on replicating user behaviors. 
- Whether the software meets the needs of the end-user and is ready for deployment.


#Part 2: Introduction to AI and Prompt Engineering
Define prompt engineering and discuss its importance in interacting with AI models.
-It is all about crafting questions or statements for AI models with the desire to get the best possible responses
Importance:
It ensures that when you ask your questions, they are clear and specific in order for AI to understand exactly what you need. The better the prompt, the better the AI response



Provide an example of a vague prompt and then improve it by making it clear, specific, and concise. Explain why the improved prompt is more effective.
Draw a picture of a person
Draw a full-body portrait of a young woman with long brown hair, wearing a red jacket and blue jeans, standing in a park on a sunny day with trees and grass in the background.
Clarity: The improved prompt specifies what is being asked (a full-body portrait) rather than just a "person.
